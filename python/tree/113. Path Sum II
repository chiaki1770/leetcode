# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: TreeNode, targetSum: int) -> List[List[int]]:
        result = []
        self.dfs(root, targetSum, [], result)
        return result
        
    def dfs(self, node, target, permutation, result):
        if not node:
            return
        
        if not node.left and not node.right and target == node.val:
            result.append(list(permutation + [node.val]))
            return
        
        permutation.append(node.val)
        self.dfs(node.left, target-node.val, permutation, result)
        self.dfs(node.right, target-node.val, permutation, result)
        permutation.pop()
