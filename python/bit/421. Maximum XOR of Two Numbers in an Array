# [3,10,5,25,2,8] -> ["00011", "01010", "00101", "11001", "00010", "01000"]
# a ^ b = c <=> a ^ c = b
# ["0", "0", "0", "1", "0", "0"] => {"0", "1"} => "1"
# ["00", "01", "00", "11", "00", "01"] => {"00", "01", "11"} => "11"
# ["000", "010", "001", "110", "000", "010"] => {"000", "001", "010", "110"} => "111"
# ["0001", "0101", "0010", "1100", "0001", "0100"] => {"0001", "0101", "0010", "1100", "0100"} 
#           => "1111" X => "1110"
# ["00011", "01010", "00101", "11001", "00010", "01000"] => "11100"

class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        res = 0
        for i in range(31, -1, -1):
            res <<= 1
            pre = {n >> i for n in nums}
            #假设该位置可以为1，然后与每个数进行异或，查看结果是否在其中，如果不在，结果为0
            res += any(res ^ 1 ^ p in pre for p in pre)
        return res
