# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: ListNode) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        if head is None or head.next is None:
            return head

        mid = self.findMiddle(head)
        last = self.reverse(mid.next)
        mid.next = None
        while last:
            tmp = head.next
            head.next = last
            h = last.next
            last.next = tmp
            head = tmp
            last = h
            
    def findMiddle(self, h):
        slow, fast = h, h.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
        return slow
    
    def reverse(self, h):
        prev = None
        while h:
            tmp = h.next
            h.next = prev
            prev = h
            h = tmp
            
        return prev
