FRESH = 1
ROTTEN = 2
DIRECTIONS = [(1, 0), (0, 1), (-1, 0), (0, -1)]
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        fresh, minutes = 0, 0
        queue = collections.deque([])
        for i in range(m):
            for j in range(n):
                if grid[i][j] == FRESH:
                    fresh += 1
                elif grid[i][j] == ROTTEN:
                    queue.append((i, j))
                    
        if fresh == 0:
            return minutes
        
        while queue:
            minutes += 1
            for _ in range(len(queue)):
                x, y = queue.popleft()
                
                for delta_x, delta_y in DIRECTIONS:
                    new_x = x + delta_x
                    new_y = y + delta_y
                    
                    if 0 <= new_x < m and 0 <= new_y < n and grid[new_x][new_y] == FRESH:
                        fresh -= 1
                        if fresh == 0:
                            return minutes
                        grid[new_x][new_y] = ROTTEN
                        queue.append((new_x, new_y))
                        
        return -1
                     
